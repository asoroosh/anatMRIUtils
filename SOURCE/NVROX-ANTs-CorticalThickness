# ============= FUNCTIONS ====================================
#error_exit() { echo "$1" 1>&2;  exit 1; }
# Also write a log function for later use
# ============== Initialise ==================================
# ml ANTs

InputDir=${1}
OutputDir=${2}

TemplateMNI=$FSLDIR/data/standard/MNI152_T1_2mm_brain.nii.gz
MaskMNI=$FSLDIR/data/standard/MNI152_T1_2mm_brain_mask.nii.gz
OasisTemplates=${HOME}/AUX/ANTs/templates/Oasis

OP=$OutputDir/antsCorticalThickness/

ImageDim=3

echo "== Input Image: ${InputDir}"
echo "== Output Image: ${OutputDir}"
echo "== Templates: ${OasisTemplates}"


#=============== OUTPUTS
#1-BrainExtractionMask- Brain extraction mask in subject space.

#2-BrainNormalizedToTemplate - Extracted brain image normalized to the template space.
#3-BrainSegmentation0N4 - Input to the segmentation algorithm. It is not brain extracted, but is bias-corrected. 
#	If multiple images are used for segmentation, there will be BrainSegmentation1N4 and so on. The brain extracted version of this is ExtractedBrain0N4.
#4-BrainSegmentation - Segmentation image, one label per tissue class. The number of classes is determined by the input priors.
#5-BrainSegmentationPosteriors1 - Posterior probability of class 1 (usually CSF). A similar image is produced for all classes. 
#	The numbering scheme matches the input priors.
#6-CorticalThickness - Cortical thickness image in subject space.
#7-CorticalThicknessNormalizedToTemplate - Cortical thickness image in template space.
#8-ExtractedBrain0N4 - Brain-extracted version of BrainSegmentation0N4.
#9-SubjectToTemplate1Warp, SubjectToTemplate0GenericAffine.mat - Transforms to be used when 
#	warping images from the subject space to the template space (see below).
#10-SubjectToTemplateLogJacobian - Log of the determinant of the Jacobian, quantifies volume 
#	changes in the subject to template warp.
#11-TemplateToSubject0Warp, TemplateToSubject1GenericAffine.mat - Transforms to be used when 
#	warping images from the template to the subject space (see below).

antsCorticalThickness.sh \
-d $ImageDim \
-a $InputDir \
-e $OasisTemplates/T_template0.nii.gz \
-m $OasisTemplates/T_template0_BrainCerebellumProbabilityMask.nii.gz \
-p $OasisTemplates/Priors2/priors%d.nii.gz \
-k 1 \
-g 1 \
-o $OP

#============================ 


#===========================================================================================
#===========================================================================================
#===========================================================================================

# Bias Field Correction 
# echo "======== Bias Field Correction ====================="

# Make a mask
# echo "======== Make me a mask ====================="
# ImageMath ${ImageDim} ${OutputPrefix}mask.nii.gz Normalize ${InputDir}
# ThresholdImage ${ImageDim} ${OutputPrefix}mask.nii.gz ${OutputPrefix}mask.nii.gz 0.1 1
# Bias field Correction
# A scalar image is expected as input for bias correction. Since N4 log transforms
# the intensities, negative values or values close to zero should be processed
# prior to correction.
#minval=`$FSLDIR/bin/fslstats ${InputDir} -p 0`;

#maxval=`$FSLDIR/bin/fslstats ${InputDir} -p 100`;
#
#if [ X`echo "if ( $minval < 0 ) { 1 }" | bc -l` = X1 ] ; then
#	if [ X`echo "if ( $maxval > 0 ) { 1 }" | bc -l` = X1 ] ; then
#               error_exit "=There are negative values in your image. Bias field correction would fail in the case! ABORTING!"
#	fi
#fi
#echo "======== N4BiasFieldCorrection =============="
#N4BiasFieldCorrection \
#--image-dimensionality $ImageDim \
#--input-image ${InputDir}\
#--mask-image ${MaskMNI}\
#--output ${OutputPrefix}_BiasField

#========== Brain Extraction ================================
# This will include the bias field correction

#antsBrainExtraction.sh \
#-d $ImageDim \
#-a ${InputDir} \
#-e ${OasisTemplates}/T_template0.nii.gz \
#-m ${OasisTemplates}/T_template0_BrainCerebellumProbabilityMask.nii.gz \
#-o ${OutputDir}/

## Registration ============================================
#echo "==== antsRegistrationSyN.sh ==========="

# Registration =============================================================
#     -d:  ImageDimension: 2 or 3 (for 2 or 3 dimensional registration of single volume)
#     -f:  Fixed image(s) or source image(s) or reference image(s)
#     -m:  Moving image(s) or target image(s)
#     -o:  OutputPrefix: A prefix that is prepended to all output files.
#     -t:  transform type (default = 's')
#        t: translation (1 stage)
#        r: rigid (1 stage)
#        a: rigid + affine (2 stages)
#        s: rigid + affine + deformable syn (3 stages)
#        sr: rigid + deformable syn (2 stages)
#        so: deformable syn only (1 stage)
#        b: rigid + affine + deformable b-spline syn (3 stages)
#        br: rigid + deformable b-spline syn (2 stages)
#        bo: deformable b-spline syn only (1 stage)

#antsRegistrationSyN.sh \
#-d $ImageDim \
#-f ${TemplateMNI} \
#-t s \
#-m ${InputDir} \
#-o ${OutputPrefix}_MNI

#echo "==== antsApplyTransforms =============="

# To the anatomical image
#antsApplyTransforms \
#--dimensionality $ImageDim \
#--reference-image ${TemplateMNI} \
#--input ${InputDir} \
#--input-image-type 0 \
#--transform ${OutputPrefix}1Warp.nii.gz \
#--transform ${OutputPrefix}0GenericAffine.mat \
#--output ${OutputPrefix}_${ImageName}_MNI.nii.gz \
#--verbose 1

# To the mask
#antsApplyTransforms \
#--dimensionality $ImageDim \
#--reference-image ${TemplateMNI} \
#--input ${InputDir} \
#--input-image-type 0 \
#--transform ${OutputPrefix}1Warp.nii.gz \
#--transform ${OutputPrefix}0GenericAffine.mat \
#--output ${OutputPrefix}_${ImageName}_MNI.nii.gz \
#--verbose 1

#===========================================================================================
#===========================================================================================
#===========================================================================================
