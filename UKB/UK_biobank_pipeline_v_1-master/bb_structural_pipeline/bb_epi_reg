#!/bin/bash
#   Copyright (C) 2012 University of Oxford
#
#   SHCOPYRIGHT
Usage() {
    echo ""
    echo "Usage: `basename $0` [options] --epi=<EPI image> --t1=<wholehead T1 image> --t1brain=<brain extracted T1 image> --out=<output name>"
    echo " "
    echo "Optional arguments"
    echo "  --fmap=<image>         : fieldmap image (in rad/s)"
    echo "  --fmapmag=<image>      : fieldmap magnitude image - wholehead extracted"
    echo "  --fmapmagbrain=<image> : fieldmap magnitude image - brain extracted"
    echo "  --gdc=<image>          : Gradient-distortion corection warpfield"
    echo "  --wmseg=<image>        : white matter segmentation of T1 image"
    echo "  --echospacing=<val>    : Effective EPI echo spacing (sometimes called dwell time) - in seconds"
    echo "  --pedir=<dir>          : phase encoding direction, dir = x/y/z/-x/-y/-z"
    echo "  --weight=<image>       : weighting image (in T1 space)"
    echo "  --nofmapreg            : do not perform registration of fmap to T1 (use if fmap already registered) "
    echo "  --noclean              : do not clean up intermediate files"
    echo "  -v                     : verbose output"
    echo "  -h                     : display this help message"
    echo " "
    echo "e.g.:  `basename $0` --epi=example_func --t1=struct --t1brain=struct_brain --out=epi2struct --fmap=fmap_rads --fmapmag=fmap_mag --fmapmagbrain=fmap_mag_brain --echospacing=0.0005 --pedir=-y"
    echo " "
    echo "Note that if parallel acceleration is used in the EPI acquisition then the *effective* echo spacing is the actual echo spacing between acquired lines in k-space divided by the acceleration factor."
    echo " "
    exit 1
}



get_opt1() {
    arg=`echo $1 | sed 's/=.*//'`
    echo $arg
}


get_arg1() {
    if [ X`echo $1 | grep '='` = X ] ; then 
	echo "Option $1 requires an argument" 1>&2
	exit 1
    else 
	arg=`echo $1 | sed 's/.*=//'`
	if [ X$arg = X ] ; then
	    echo "Option $1 requires an argument" 1>&2
	    exit 1
	fi
	echo $arg
    fi
}

get_imarg1() {
    arg=`get_arg1 $1`;
    arg=`$FSLDIR/bin/remove_ext $arg`;
    echo $arg
}

get_arg2() {
    if [ X$2 = X ] ; then
	echo "Option $1 requires an argument" 1>&2
	exit 1
    fi
    echo $2
}


# list of variables to be set via the options
vepi="";
vrefhead="";
vrefbrain="";
vout="";
use_fmap=no;
use_weighting=no;
verbose=no
cleanup=yes;
fmaprads="";
fmapmaghead="";
fmapmagbrain="";
gdcwarp="";
wmseg="";
dwell="";
pe_dir="";
fdir="y";
fmapreg=yes;


# Parse them baby

if [ $# -lt 4 ] ; then Usage; exit 0; fi
while [ $# -ge 1 ] ; do
    iarg=`get_opt1 $1`;
    case "$iarg"
	in
	--epi)
	    vepi=`get_imarg1 $1`;
	    shift;;
	--t1)
	    vrefhead=`get_imarg1 $1`;
	    shift;;
	--t1brain)
	    vrefbrain=`get_imarg1 $1`;
	    shift;;
	--fmap)
	    fmaprads=`get_imarg1 $1`;
	    use_fmap=yes; 
	    shift;;
	--fmapmag)
	    fmapmaghead=`get_imarg1 $1`;
	    shift;;
	--fmapmagbrain)
	    fmapmagbrain=`get_imarg1 $1`;
	    shift;;
	--gdc)
	    gdcwarp=`get_imarg1 $1`;
	    shift;;	
	--wmseg)
	    wmseg=`get_imarg1 $1`;
	    shift;;
	--out)
	    vout=`get_imarg1 $1`;
	    shift;;
	--echospacing)
	    dwell=`get_arg1 $1`;
	    if [ `echo "if ( $dwell > 0.2 ) {1}; if ( $dwell <= 0.2 ) {0}" | bc -l` = 1 ] ; then 
		msdwell=`echo "scale=6; $dwell / 1000.0" | bc -l`;
		echo "Echo spacing should be specified in seconds, not milliseconds.  Value of $dwell appears to be incorrectly specified in milliseconds.  Try using the value $msdwell instead."; 
		exit 1; 
	    fi
	    shift;;
	--pedir)
	    pearg=`get_arg1 $1`;
            # These are consistent with the ones used in FUGUE (this has been checked)
	    if [ $pearg = "x" ] ; then pe_dir=1; fdir="x"; fi
	    if [ $pearg = "y" ] ; then pe_dir=2; fdir="y"; fi
	    if [ $pearg = "z" ] ; then pe_dir=3; fdir="z"; fi
	    if [ $pearg = "-x" ] ; then pe_dir=-1; fdir="x-"; fi
	    if [ $pearg = "-y" ] ; then pe_dir=-2; fdir="y-"; fi
	    if [ $pearg = "-z" ] ; then pe_dir=-3; fdir="z-"; fi
	    if [ $pearg = "x-" ] ; then pe_dir=-1; fdir="x-"; fi
	    if [ $pearg = "y-" ] ; then pe_dir=-2; fdir="y-"; fi
	    if [ $pearg = "z-" ] ; then pe_dir=-3; fdir="z-"; fi
	    if [ X${pe_dir} = X ] ; then
		echo "Error: invalid phase encode direction specified";
		exit 2;
	    fi
	    shift;;
	--weight)
	    refweight=`get_imarg1 $1`;
	    use_weighting=yes; 
	    echo REFWEIGHT = $refweight;
	    shift;;
	--nofmapreg)
	    fmapreg=no; 
	    shift;;
	--noclean)
	    cleanup=no; 
	    shift;;
	-v)
	    verbose=yes; 
	    shift;;
	-h)
	    Usage;
	    exit 0;;
	*)
	    #if [ `echo $1 | sed 's/^\(.\).*/\1/'` = "-" ] ; then 
	    echo "Unrecognised option $1" 1>&2
	    exit 1
	    #fi
	    #shift;;
    esac
done

### Sanity checking of arguments

if [ X$vout = X ] ; then
  echo "The compulsory argument --out MUST be used"
  exit 1;
fi

if [ X$vepi = X ] ; then
  echo "The compulsory argument --epi MUST be used"
  exit 1;
fi

if [ X$vrefhead = X ] ; then
  echo "The compulsory argument --t1 MUST be used"
  exit 1;
fi

if [ X$vrefbrain = X ] ; then
  echo "The compulsory argument --t1brain MUST be used"
  exit 1;
fi

if [ $use_fmap = yes ] ; then
    if [ X$fmaprads = X ] ; then
	echo "The argument --fmap MUST be usspecifieded if using fieldmaps"
	exit 1;
    fi
    if [ X$fmapmaghead = X ] ; then
	echo "The argument --fmapmag MUST be specified if using fieldmaps"
	exit 1;
    fi
    if [ X$fmapmagbrain = X ] ; then
	echo "The argument --fmapmagbrain MUST be specified if using fieldmaps"
	exit 1;
    fi
    if [ X$pe_dir = X ] ; then
	echo "The argument --pedir MUST be specified if using fieldmaps"
	exit 1;
    fi
    if [ X$dwell = X ] ; then
	echo "The argument --echospacing MUST be specified if using fieldmaps"
	exit 1;
    fi
fi

if [ $verbose = yes ] ; then
    echo "Arguments are:"
    echo "  vepi = $vepi"
    echo "  vrefhead = $vrefhead"
    echo "  vrefbrain = $vrefbrain"
    echo "  vout = $vout"
    echo "  fmaprads = $fmaprads"
    echo "  fmapmaghead = $fmapmaghead"
    echo "  fmapmagbrain = $fmapmagbrain"
    echo "  wmseg = $wmseg"
    echo "  dwell = $dwell"
    echo "  pe_dir = $pe_dir"
    echo "  fdir = $fdir"
    echo "  use_fmap = $use_fmap"
    echo "  use_weighting = $use_weighting"
fi

##########################################################################################


# create the WM segmentation
if [ X$wmseg = X ] ; then
    if [ `$FSLDIR/bin/imtest ${vrefbrain}_wmseg` = 0 ] ; then
	echo "Running FAST segmentation"
	$FSLDIR/bin/fast -o ${vout}_fast ${vrefbrain}
	$FSLDIR/bin/fslmaths ${vout}_fast_pve_2 -thr 0.5 -bin ${vout}_fast_wmseg
    else
	for file in ${vrefbrain}_wmseg*; do
	    absfile=`$BB_BIN_DIR/bb_pipeline_tools/bb_fsl_abspath $file`;
	    cp ${absfile} ${file/${vrefbrain}_wmseg/${vout}_fast_wmseg} #To link the correct files with extensions
	done
    fi
else
    # copy specified wmseg file(s)
    for file in `$FSLDIR/bin/imglob -extensions ${wmseg}`; do
	absfile=`$BB_BIN_DIR/bb_pipeline_tools/bb_fsl_abspath $file`;
	cp  ${absfile} ${file/${wmseg}/${vout}_fast_wmseg} #To link the correct files with extensions
    done
fi
# make a WM edge map for visualisation (good to overlay in FSLView)
if [ `$FSLDIR/bin/imtest ${vrefbrain}_wmedge` = 0 ] ; then
  $FSLDIR/bin/fslmaths ${vout}_fast_wmseg -edge -bin -mas ${vout}_fast_wmseg ${vout}_fast_wmedge
else
    for file in ${vrefbrain}_wmedge*; do
	absfile=`$BB_BIN_DIR/bb_pipeline_tools/bb_fsl_abspath $file`;
	cp ${absfile} ${file/${vrefbrain}_wmedge/${vout}_fast_wmedge} #To link the correct files with extensions
    done
fi


# do a standard flirt pre-alignment
echo "FLIRT pre-alignment"
$FSLDIR/bin/flirt -ref ${vrefbrain} -in ${vepi} -dof 6 -omat ${vout}_init.mat

####################

if [ $use_fmap = no ] ; then

# NO FIELDMAP
    # now run the bbr
    echo "Running BBR"
    $FSLDIR/bin/flirt -ref ${vrefhead} -in ${vepi} -dof 6 -cost bbr -wmseg ${vout}_fast_wmseg -init ${vout}_init.mat -omat ${vout}.mat -out ${vout} -schedule ${FSLDIR}/etc/flirtsch/bbr.sch
    $FSLDIR/bin/applywarp -i ${vepi} -r ${vrefhead} -o ${vout} --premat=${vout}.mat --interp=spline

####################

else

# WITH FIELDMAP
    echo "Registering fieldmap to structural"
    if [ $fmapreg = yes ] ; then
        # register fmap to structural image
	$FSLDIR/bin/flirt -in ${fmapmagbrain} -ref ${vrefbrain} -dof 6 -omat ${vout}_fieldmap2str_init.mat
	$FSLDIR/bin/flirt -in ${fmapmaghead} -ref ${vrefhead} -dof 6 -init ${vout}_fieldmap2str_init.mat -omat ${vout}_fieldmap2str.mat -out ${vout}_fieldmap2str -nosearch
    else
	$FSLDIR/bin/imcp ${fmapmaghead} ${vout}_fieldmap2str
	cp $FSLDIR/etc/flirtsch/ident.mat ${vout}_fieldmap2str.mat
    fi
    # unmask the fieldmap (necessary to avoid edge effects)
    $FSLDIR/bin/fslmaths ${fmapmagbrain} -abs -bin ${vout}_fieldmaprads_mask
    $FSLDIR/bin/fslmaths ${fmaprads} -abs -bin -mul ${vout}_fieldmaprads_mask ${vout}_fieldmaprads_mask
    $FSLDIR/bin/fugue --loadfmap=${fmaprads} --mask=${vout}_fieldmaprads_mask --unmaskfmap --savefmap=${vout}_fieldmaprads_unmasked --unwarpdir=${fdir}   # the direction here should take into account the initial affine (it needs to be the direction in the EPI)
	
    # the following is a NEW HACK to fix extrapolation when fieldmap is too small
    $FSLDIR/bin/applywarp -i ${vout}_fieldmaprads_unmasked -r ${vrefhead} --premat=${vout}_fieldmap2str.mat -o ${vout}_fieldmaprads2str_pad0
    $FSLDIR/bin/fslmaths ${vout}_fieldmaprads2str_pad0 -abs -bin ${vout}_fieldmaprads2str_innermask
    $FSLDIR/bin/fugue --loadfmap=${vout}_fieldmaprads2str_pad0 --mask=${vout}_fieldmaprads2str_innermask --unmaskfmap --unwarpdir=${fdir} --savefmap=${vout}_fieldmaprads2str_dilated
    $FSLDIR/bin/fslmaths ${vout}_fieldmaprads2str_dilated ${vout}_fieldmaprads2str

    # run bbr with fieldmap
    echo "Running BBR with fieldmap"
    if [ $use_weighting = yes ] ; then wopt="-refweight $refweight"; else wopt=""; fi
    $FSLDIR/bin/flirt -ref ${vrefhead} -in ${vepi} -dof 6 -cost bbr -wmseg ${vout}_fast_wmseg -init ${vout}_init.mat -omat ${vout}.mat -out ${vout}_1vol -schedule ${FSLDIR}/etc/flirtsch/bbr.sch -echospacing ${dwell} -pedir ${pe_dir} -fieldmap ${vout}_fieldmaprads2str $wopt

    # make equivalent warp fields
    echo "Making warp fields and applying registration to EPI series"
    $FSLDIR/bin/convert_xfm -omat ${vout}_inv.mat -inverse ${vout}.mat
    $FSLDIR/bin/convert_xfm -omat ${vout}_fieldmaprads2epi.mat -concat ${vout}_inv.mat ${vout}_fieldmap2str.mat
    $FSLDIR/bin/applywarp -i ${vout}_fieldmaprads_unmasked -r ${vepi} --premat=${vout}_fieldmaprads2epi.mat -o ${vout}_fieldmaprads2epi
    $FSLDIR/bin/fslmaths ${vout}_fieldmaprads2epi -abs -bin ${vout}_fieldmaprads2epi_mask
    $FSLDIR/bin/fugue --loadfmap=${vout}_fieldmaprads2epi --mask=${vout}_fieldmaprads2epi_mask --saveshift=${vout}_fieldmaprads2epi_shift --unmaskshift --dwell=${dwell} --unwarpdir=${fdir}
    $FSLDIR/bin/convertwarp -r ${vrefhead} -s ${vout}_fieldmaprads2epi_shift --postmat=${vout}.mat -o ${vout}_warp --shiftdir=${fdir} --relout
    $FSLDIR/bin/applywarp -i ${vepi} -r ${vrefhead} -o ${vout} -w ${vout}_warp --interp=spline --rel

    if [ X$gdcwarp != X ]; then
	${FSLDIR}/bin/convertwarp --ref=${vepi} --warp1=${vout}_warp --midmat=${vout}_inv.mat --warp2=${gdcwarp}  --out=${vepi}2${vepi}_undistorted_warp --relout
	echo "${FSLDIR}/bin/convertwarp --ref=${vepi} --warp1=${vout}_warp --midmat=${vout}_inv.mat --warp2=${gdcwarp}  --out=${vepi}2${vepi}_undistorted_warp --relout"
	${FSLDIR}/bin/applywarp -i ${vepi} -r ${vepi} -o ${vepi}_fully_undistorted -w ${vepi}2${vepi}_undistorted_warp --interp=spline --rel
	${FSLDIR}/bin/flirt -ref ${vrefhead} -in ${vepi}_fully_undistorted -dof 6 -cost bbr -wmseg ${vout}_fast_wmseg -init ${vout}.mat -omat ${vout}.mat -out ${vout} -schedule ${FSLDIR}/etc/flirtsch/bbr.sch
	${FSLDIR}/bin/convertwarp --ref=${vrefhead} --warp1=${vout}_warp --midmat=${vout}_inv.mat --warp2=${gdcwarp} --postmat=${vout}.mat --out=${vout}_warp --relout
	${FSLDIR}/bin/applywarp -i ${vepi} -r ${vrefhead} -o ${vout} -w ${vout}_warp --interp=spline --rel
	
    fi

fi

####################

# CLEAN UP UNNECESSARY FILES
if [ $cleanup = yes ] ; then
    $FSLDIR/bin/imrm ${vout}_fast_mixeltype ${vout}_fast_pve* ${vout}_fast_seg
    $FSLDIR/bin/imrm ${vout}_fieldmap*mask* ${vout}_fieldmap2str_pad0
fi


